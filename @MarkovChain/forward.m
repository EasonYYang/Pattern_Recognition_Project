function [alfaHat, c]=forward(mc,pX)%[alfaHat, c]=forward(mc,pX)%calculates state and observation probabilities for one single data sequence,%using the forward algorithm, for a given single MarkovChain object,%to be used when the MarkovChain is included in a HMM object.%%Input:%mc= single MarkovChain object%pX= matrix with state-conditional likelihood values,%   without considering the Markov depencence between sequence samples.%	pX(j,t)= myScale(t)* P( X(t)= observed x(t) | S(t)= j ); j=1..N; t=1..T%	(must be pre-calculated externally)%NOTE: pX may be arbitrarily scaled, as defined externally,%   i.e., pX may not be a properly normalized probability density or mass.%%NOTE: If the HMM has Finite Duration, it is assumed to have reached the end%after the last data element in the given sequence, i.e. S(T+1)=END=N+1.%%Result:%alfaHat=matrix with normalized state probabilities, given the observations:%	alfaHat(j,t)=P[S(t)=j|x(1)...x(t), HMM]; t=1..T%c=row vector with observation probabilities, given the HMM:%	c(t)=P[x(t) | x(1)...x(t-1),HMM]; t=1..T%	c(1)*c(2)*..c(t)=P[x(1)..x(t)| HMM]\%   If the HMM has Finite Duration, the last element includes%   the probability that the HMM ended at exactly the given sequence length, i.e.%   c(T+1)= P( S(T+1)=N+1| x(1)...x(T-1), x(T)  )%Thus, for an infinite-duration HMM:%   length(c)=T%   prod(c)=P( x(1)..x(T) )%and, for a finite-duration HMM:%   length(c)=T+1%   prod(c)= P( x(1)..x(T), S(T+1)=END )%%NOTE: IF pX was scaled externally, the values in c are %   correspondingly scaled versions of the true probabilities.%%----------------------------------------------------%Code Authors: Yichen Yang, Yihan Wang%Date: 2019-05-31%Contact: yyichen@kth.se; yihanw@kth.se%--------------------------------------------------------T=size(pX,2);%Number of observations. second dimension, num of column[row,col]=size(mc.TransitionProb);alfaHat=zeros(row,T);%size arrangementalfaHat_temp=zeros(row,1);Initial_State=length(mc.InitialProb);%	pX(j,t)= myScale(t)* P( X(t)= observed x(t) | S(t)= j ); j=1..N; t=1..Tfor s=1:Initial_State    alfaHat_temp(s)=mc.InitialProb(s)*pX(s,1);endsum_1=sum(alfaHat_temp);alfaHat(:,1)=alfaHat_temp./sum_1;if row == col    %infinite    c=zeros(T,1);    c(1)=sum_1;    clear sum_1;    for t=2:T        alfaHat_temp=zeros(row,1);        for j=1:row %j stands for states            alfaHat_temp(j)=pX(j,t)*(alfaHat(:,t-1)'*mc.TransitionProb(:,j));        end        c(t)=sum(alfaHat_temp);        alfaHat(:,t)=alfaHat_temp./c(t);    endelseif row == col-1    %finite    c=zeros(T+1,1);    c(1)=sum_1;    clear sum_1;    for t=2:T        alfaHat_temp=zeros(row,1);        for j=1:row %j stands for states            alfaHat_temp(j)=pX(j,t)*(alfaHat(:,t-1)'*mc.TransitionProb(:,j));        end        c(t)=sum(alfaHat_temp);        alfaHat(:,t)=alfaHat_temp./c(t);    end    c(T+1)=(alfaHat(:,T)'*mc.TransitionProb(:,col));    else     exit(0);    %errorend%-------------------- continue code from here, and delete error message%error('Not yet implemented');end